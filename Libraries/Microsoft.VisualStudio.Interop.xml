<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Interop</name>
  </assembly>
  <members>
    <member name="M:MarshalHelper.ReleaseComObject(System.Object)">
      <summary>
            A wrapper for <see cref="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)" /> that no-ops when run on .NET on non-Windows platforms.
            </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Interop.ExcludeFromIDLAttribute">
      <summary>
      </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Interop.ExcludeFromProxyBuildAttribute">
      <summary>
      </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProgress.Report(System.Double)">
      <summary>
            Reports the progress of an operation.
            </summary>
      <param name="value">The progress of the operation.</param>
      <remarks>
        <paramref name="value" /> can be in the range [0.0..1.0], where 0.0 is 0%
            complete and 1.0 is 100% complete.  A value outside that range indicates
            indeterminate progress.
            <para>
            Implementers should be prepared for this method to be called on any thread.
            </para></remarks>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult">
      <summary>
            The result of an asynchronous save operation.  This is the value returned from the
            GetResult method on the asynchronous save's returned <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTask" />.
            </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult.DataLossIncurred">
      <summary>
            This is set to <c>true</c> if the save was successful but there was data loss.
            </summary>
      <remarks>
            Setting this to <c>true</c> is similar to returning STG_S_DATALOSS from synchronous
            save operations.
            </remarks>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult.SaveCanceled">
      <summary>
            This is set to <c>true</c> if the user canceled the save operation.
            </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult.FileName">
      <summary>
            The name of the saved file.  This can be <c>null</c> or empty if the name of the
            saved file did not change.
            </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState">
      <summary>
            Optional interface that can be implemented by docdata objects that need to
            preserve state data at the beginning of an aync save operation.
            </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState.GetAsyncSaveState">
      <summary>
            Returns a state object (such as a checkpoint) for an async save operation.
            </summary>
      <remarks>
            This method is called at the beginning of an asynchronous save. A docdata can
            implement this interface and supply a state object. It can retrieve the state
            object in its implementation of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFile.SaveAsync(System.String,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsProgress)" /> or
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFileFormat.SaveAsync(System.String,System.Boolean,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)" /> by calling
            IVsAsyncRunningDocumentTable.GetAsyncSaveState.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable.SaveDocumentsAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <summary>
            Saves one or more documents asynchronously.
            </summary>
      <param name="saveOpts">The save options</param>
      <param name="hierarchy">
            The hierarchy that owns the document to save, or <c>null</c>.  This
            parameter is only used if <paramref name="docCookie" /> is VSCOOKIE_NIL
            and <paramref name="itemid" /> is not VSITEMID_SELECTION.  In that case,
            if this parameter is non-null, then the document identified by
            <paramref name="itemid" /> is saved.
            </param>
      <param name="itemid">
            The item identifier for the document to save, or VSITEMID_SELECTION.
            This parameter is only used if <paramref name="docCookie" /> is VSCOOKIE_NIL.
            In that case, if this value is VSITEMID_SELECTION then all selected documents
            are saved.  If this value is not VSITEMID_SELECTION and <paramref name="hierarchy" />
            is non-null, this value must be something other than VSITEMID_NIL.
            </param>
      <param name="docCookie">
            The cookie for the document, or VSCOOKIE_NIL.  If this parameter is not
            VSCOOKIE_NIL, <paramref name="hierarchy" /> and <paramref name="itemid" /> are
            ignored and the document identified by the cookie is saved.
            </param>
      <param name="progress">The interface through which progress is reported.</param>
      <returns>A task representing the asynchronous operation</returns>
      <remarks>
            If <paramref name="docCookie" /> is VSCOOKIE_NIL, <paramref name="itemid" />
            is not VSITEMID_SELECTION, and <paramref name="hierarchy" /> is <c>null</c>,
            all dirty documents are saved.
            <para>
            Implementers should be prepared for this method to be called on any thread.
            </para></remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable.GetAsyncSaveState(Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState)">
      <summary>
            Retrieves the state object (such as a checkpoint) for an async save operation.
            </summary>
      <param name="provider">The provider of the state object.</param>
      <remarks>
            This method is called from a docdata's implementation of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFile.SaveAsync(System.String,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsProgress)" />
            or <see cref="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFileFormat.SaveAsync(System.String,System.Boolean,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)" /> to fetch the state object supplied by
            <paramref name="provider" /> in its implementation of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState.GetAsyncSaveState" />.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable2.SaveDocumentsAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <inheritdoc cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable.SaveDocumentsAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)" />
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable2.GetAsyncSaveState(Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState)">
      <inheritdoc cref="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable.GetAsyncSaveState(Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState)" />
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable2.UpdateAsyncSaveState(Microsoft.VisualStudio.Shell.Interop.IVsProvideAsyncSaveState,System.Object)">
      <summary>
            Updates the state object (such as a checkpoint) for an async save operation.
            </summary>
      <param name="provider">The provider of the state object.</param>
      <param name="saveState">The provider's updated state object.</param>
      <remarks>
            A provider  might want to do this if the state object changed, say, while processing the
            OnBeforeSave or OnBeforeSaveAsync event.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncRunningDocumentTable2.UnlockDocumentAsync(System.UInt32,System.UInt32)">
      <summary>
            Removes a lock from a document.
            </summary>
      <param name="lockType">The type of lock to remove.</param>
      <param name="docCookie">The document cookie.</param>
      <returns>A task representing the asynchronous operation.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncShell.SaveDocDataToFileAsync(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.Object,System.String,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <summary>
            Saves a docdata to a file asynchronously.
            </summary>
      <param name="flags">The save flags.</param>
      <param name="persistFile">The file in which the docdata is to be saved.</param>
      <param name="untitledPath">
            File path to which the doc data for an as-yet unsaved document is to be saved.
            </param>
      <param name="progress">The interface through which progress is reported.</param>
      <returns>
            A task representing the asynchronous operation.  The result of the returned task
            will be <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult" />.
            </returns>
      <remarks>
            Implementers should be prepared for this method to be called on any thread.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSolution.SaveSolutionElementAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <summary>
            Saves a solution element asynchronously.
            </summary>
      <param name="saveOpts">The save options.</param>
      <param name="hierarchy">The hierarchy.</param>
      <param name="docCookie">The document cookie.</param>
      <param name="progress">The interface through which progress is reported.</param>
      <returns>
            A task representing the asynchronous operation.
            </returns>
      <remarks>
            Implementers should be prepared for this method to be called on any thread.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistHierarchyItem.SaveItemAsync(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.Object,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <summary>
            Saves a hierarchy item, asynchronously.
            </summary>
      <param name="flags">The save flags.</param>
      <param name="silentSaveAsName">
            The file name to be applied when <paramref name="flags" /> is set to VSSAVE_SilentSave.
            </param>
      <param name="itemid">The ID of the hierarchy item to be saved.</param>
      <param name="docData">The document data of the item to be saved.</param>
      <param name="progress">The interface through which progress is reported.</param>
      <returns>
            A task representing the asynchronous operation.  The result of the returned task
            will be <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult" />.  The <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult.FileName" />
            property is unused.
            </returns>
      <remarks>
            Implementers should be prepared for this method to be called on any thread.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistHierarchyItem.ReloadItemAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <summary>
            Reloads a hierarchy item, asynchronously.
            </summary>
      <param name="itemid">The ID of the hierarchy item to be reloaded.</param>
      <param name="progress">The interface through which progress is reported.</param>
      <returns>
            A task representing the asynchronous operation.
            </returns>
      <remarks>
            Implementers should be prepared for this method to be called on any thread.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistDocData.LoadDocDataAsync(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <summary>
            Loads the document data for a given document, asynchronously.
            </summary>
      <param name="moniker">The moniker for the document to be loaded.</param>
      <param name="progress">The interface through which progress is reported.</param>
      <returns>
            A task representing the asynchronous operation.
            </returns>
      <remarks>
            Implementers should be prepared for this method to be called on any thread.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistDocData.SaveDocDataAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <summary>
            Saves the document data, asynchronously.
            </summary>
      <param name="flags">The save flags</param>
      <param name="progress">The interface through which progress is reported.</param>
      <returns>
            A task representing the asynchronous operation.  The result of the returned task
            will be <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult" />.
            </returns>
      <remarks>
            Implementers should be prepared for this method to be called on any thread.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsAsyncPersistDocData.ReloadDocDataAsync(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <summary>
            Reloads the document data asynchronously and in the process determines whether to ignore
            a subsequent file change.
            </summary>
      <param name="flags">
            Flag indicating whether to ignore the next file change when reloading the document data.
            </param>
      <param name="progress">The interface through which progress is reported.</param>
      <returns>
            A task representing the asynchronous operation.
            </returns>
      <remarks>
            Implementers should be prepared for this method to be called on any thread.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFile.LoadAsync(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <summary>
            Opens a specified file asynchronously and initializes an object from the file contents.
            </summary>
      <param name="filename">The name of the file to load.</param>
      <param name="grfMode">
            File format mode. If zero, the object uses the usual defaults as if the user had opened the file.
            </param>
      <param name="progress">The interface through which progress is reported.</param>
      <returns>
            A task representing the asynchronous operation.
            </returns>
      <remarks>
            Implementers should be prepared for this method to be called on any thread.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFile.SaveAsync(System.String,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <summary>
            Saves a copy of the object to the specified file, asynchronously.
            </summary>
      <param name="filename">
            The file name. This parameter can be <c>null</c>, in which case the object is saved to its
            current file. If the object is in the untitled state and <paramref name="filename" /> is <c>null</c>,
            <see cref="T:System.ArgumentException" /> is thrown.
            </param>
      <param name="remember">
            Indicates whether <paramref name="filename" /> is to be used as the current working file.  If
            <c>true</c>, <paramref name="filename" /> becomes the current file and the object should clear
            its dirty flag after the save. If <c>false</c>, this save operation is a Save a Copy As operation.
            In this case, the current file is unchanged and the object does not clear its dirty flag.
            If <paramref name="filename" /> is <c>null</c>, <paramref name="remember" /> is ignored.
            </param>
      <param name="progress">The interface through which progress is reported.</param>
      <returns>
            A task representing the asynchronous operation.  The result of the returned task
            will be <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult" />.  The <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult.FileName" />
            property is unused.
            </returns>
      <remarks>
            Implementers should be prepared for this method to be called on any thread.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFileFormat.LoadAsync(System.String,System.UInt32,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <summary>
            Opens a specified file asynchronously and initializes an object from the file contents.
            </summary>
      <param name="filename">The name of the file to load.</param>
      <param name="grfMode">
            File format mode. If zero, the object uses the usual defaults as if the user had opened the file.
            </param>
      <param name="readOnly">
            A value of <c>true</c> indicates that the file should be opened as read-only.
            </param>
      <param name="progress">The interface through which progress is reported.</param>
      <returns>
            A task representing the asynchronous operation.
            </returns>
      <remarks>
            Implementers should be prepared for this method to be called on any thread.
            </remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IAsyncPersistFileFormat.SaveAsync(System.String,System.Boolean,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsProgress)">
      <summary>
            Saves a copy of the object to the specified file, asynchronously.
            </summary>
      <param name="filename">
            The file name. This parameter can be <c>null</c>, in which case the object is saved to its
            current file. If the object is in the untitled state and <paramref name="filename" /> is <c>null</c>,
            <see cref="T:System.ArgumentException" /> is thrown.
            </param>
      <param name="remember">
            Indicates whether <paramref name="filename" /> is to be used as the current working file.  If
            <c>true</c>, <paramref name="filename" /> becomes the current file and the object should clear
            its dirty flag after the save. If <c>false</c>, this save operation is a Save a Copy As operation.
            In this case, the current file is unchanged and the object does not clear its dirty flag.
            If <paramref name="filename" /> is <c>null</c>, <paramref name="remember" /> is ignored.
            </param>
      <param name="formatIndex">
            A value that indicates the format in which the file will be saved. The caller passes <c>DEF_FORMAT_INDEX</c>
            if the object is to choose its default (current) format. Otherwise, the value is interpreted as the index
            into the list of formats, as returned by a call to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IPersistFileFormat.GetFormatList(System.String@)" />
            method. An index value of 0 indicates the first format, 1 the second format, and so on.
            </param>
      <param name="progress">The interface through which progress is reported.</param>
      <returns>
            A task representing the asynchronous operation.  The result of the returned task
            will be <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult" />.  The <see cref="P:Microsoft.VisualStudio.Shell.Interop.IVsAsyncSaveResult.FileName" />
            property is unused.
            </returns>
      <remarks>
            Implementers should be prepared for this method to be called on any thread.
            </remarks>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVENOTIFICATIONFLAGS">
      <summary>
            A set of flags that describe attributes about a given save.
            </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable6.NotifyOnBeforeSave(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTask)">
      <summary>
            Notifies event listeners that a save is about to occur.
            </summary>
      <param name="cookie">The document cookie.</param>
      <param name="saveNotificationFlags">Provides additional information about the save.</param>
      <param name="saveTask">A task representing the save operation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable6.NotifyOnAfterSave(System.UInt32,System.UInt32)">
      <summary>
            Notifies event listeners that a save has occurred.
            </summary>
      <param name="cookie">The document cookie.</param>
      <param name="saveNotificationFlags">Provides additional information about the save.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents7.OnBeforeSaveAsync(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsTask)">
      <summary>
            Called right before a save is about to occur.
            </summary>
      <param name="cookie">The document cookie.</param>
      <param name="flags">Provides additional information about the save.</param>
      <param name="saveTask">A task representing the save operation.</param>
      <returns>
            An optional task representing async work done by the event sink.  If this is non-null,
            the RunningDocTable will await its completion before continuing the save.
            </returns>
      <remarks>
            When the RunningDocTable notifies the event sink about save events, it will first check if the event implements this
            interface and call this method. If not, it will check if it implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3" />
            and call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnBeforeSave(System.UInt32)" />. Note that this means the RDT will not call both methods.
            <para>
            Implementers should be prepared for this method to be called on any thread.
            </para></remarks>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents7.OnAfterSaveAsync(System.UInt32,System.UInt32)">
      <summary>
            Called right after a save has occurred.
            </summary>
      <param name="cookie">The document cookie.</param>
      <param name="flags">Provides additional information about the save.</param>
      <returns>
            An optional task representing async work done by the event sink.  If this is non-null,
            the RunningDocTable will await its completion before continuing the save.
            </returns>
      <remarks>
            When the RunningDocTable notifies the event sink about save events, it will first check if the event implements this
            interface and call this method. If not, it will check if it implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3" />
            and call <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents3.OnAfterSave(System.UInt32)" />. Note that this means the RDT will not call both methods.
            <para>
            Implementers should be prepared for this method to be called on any thread.
            </para></remarks>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.__VSSTATUSBARANIMATIONINDEX">
      <summary>
            A set of built in status bar animation indices.
            </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.__VSSPROPID12.VSSPROPID_ShutdownStarting">
      <summary>
            This property will be set to true after any required pre-close checks have been passed (files saved),
            but before any shutdown work has begun (like solution close)
            </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Designer.Interfaces.IVSMDPerPropertyBrowsing.GetPropertyAttributes(System.Int32,System.UInt32@,System.IntPtr,System.IntPtr)">
      <summary>
            Gets the list of attributes for the object.
            </summary>
      <param name="dispid">The dispid of the property to retrieve attributes</param>
      <param name="pceltAttrs">the number of attribute type names in <paramref name="ppbstrTypeNames" /></param>
      <param name="ppbstrTypeNames">Attribute type names, such as System.ComponentModel.BrowsableAttribute, or System.ComponentModel.DescriptionAttribute.  This can be the name of any type that derives from System.Attribute. The array is callee allocated and will be caller freed using <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />. Strings themselves should be freed with <see cref="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)" />. It can also be a static instance name such as System.ComponentModel.BrowsableAttribute.No, which will cause the initializer value to be ignored.</param>
      <param name="ppvarAttrValues">An array of variants to be used to initialize the given attributes.  If the attributes have a ctor that takes a parameter, the given argument will be used to iniitalize the attribute.  If the initializer is NULL, VT_EMPTY or VT_NULL, the default ctor will be called.  Variants will be caller freed individually by pInvoking VariantClear. The array must be freed calling <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.
            </param>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch">
      <summary>
             State of single reload batch. Include description of relevant [externally] changed files,
             resulting project /solution actions (such reload).
            
             IVsSolutionReloadBatch is freethreaded object and can be used without switching to UI thread.
             </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.DisableChangeNotifications">
      <summary>
            Needed to support original solution external file changes handler behavoir. This will only apply while batch is active.
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.IsFilesChanged(System.UInt32,System.String[],System.Boolean[])">
      <summary>
            Check the requested files against batch state (based on aggregated changes files via TryAddChangedFiles).
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.GetProjectsAction(System.UInt32,System.Guid[],System.UInt32[])">
      <summary>
            Check the status of a projects
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.TryAddSolutionReload">
      <summary>
            Request solution reload
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.TryAddProjectsReload(System.UInt32,System.UInt32,System.Guid[])">
      <summary>
            Request specific projects reload, fForceReload applies to all specified projects. Note even if reloadAction = DRA_ReloadProject [some of] selected proejcts can still end up being forcefully reloaded (even if they support own reload)
            if some other logic reqires that for same project[s]. If fForceRelad = DRA_ForceReloadProject, it is guarantee that they will be forcefully reloaded (unless solution is reloaded which will override any project reloads).
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.TryAddChangedFiles(System.UInt32,System.String[])">
      <summary>
            Add files changes hints (can be used by reload logic extender during compute stage).
            </summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.BatchId">
      <summary>
            Batch id - unique withing solution open session.
            </summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.LastChangeId">
      <summary>
            Last state change id. Each call to TryAddXXX might change the state if introduce a new reload action or new changed files hint.
            </summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.Stage">
      <summary>
            Note if BatchStage != COMPLETED, the state can be changed at any time.
            Only the IVsSolutionBatchUpdateManagerEvents event listeners are guaranteed to have stable data in this case
            </summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.HandlerId">
      <summary>
            batch handler friendly id.
            </summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.HasSolutionReload">
      <summary>
            batch require solution reload.
            </summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.BatchTask">
      <summary>
            VS task tracking batch progress.
            </summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.RequestComplete">
      <summary>
            VS request batch completion as soon as possible.
            </summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch.RequestCancel">
      <summary>
            VS request batch cancellation.
            </summary>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler">
      <summary>
            State of single reload batch. Include description of relevant [externally] changed files,
            resulting project /solution actions (such reload).
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.CanGiveControl(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler)">
      <summary>
            check current provider if it will allow giving up control to a different reload handler.
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.CanTakeControl(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler)">
      <summary>
            check if provider can/want take control and handle the currently opened scope.
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.CanJoin(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler)">
      <summary>
            check if provider is ok to join the currently opened scope and let existing handler drive it.
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.CanCommitBatch(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch,System.UInt32,System.UInt32,System.UInt32@)">
      <summary>
            called on BG thread when a state changed, or handler instructed us (via timeout).
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.CanCommitBatchUI(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch,System.UInt32,System.UInt32,System.UInt32@)">
      <summary>
            called on UI thread before commencing modal reload phase.
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.ExecuteReloadUI(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatch,System.UInt32,System.Guid[],System.UInt32[])">
      <summary>
            comence the actual reload, once this is called no additional changes can be included in batch scope and it will be closed (one way or another) after this method finis.
            In theory we can support async, but all current cases do require UI thread anyway (and it is unlikely we want to change that).
            </summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler.HandlerId">
      <summary>
            friendly HandlerId. it is string instead of usual guid for better readibility. We dont publish any predefined values.
            this scenario is always an arm race, so if specific provider wants details they need to discover them.
            </summary>
    </member>
    <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_ReloadProject">
      <summary>
            Project to be reload (closed and opened) if needed, Example: project file[s] change. If project can not handle external change, it will be reloaded by solution.
            </summary>
    </member>
    <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_ForceReloadProject">
      <summary>
            Project to be reload (closed and opened) for this batch.
            </summary>
    </member>
    <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_ReloadSolution">
      <summary>
            Force solution reload, superseeds any other actions.
            </summary>
    </member>
    <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_AddProject">
      <summary>
            Project to be added to the solution for this batch.
            </summary>
    </member>
    <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_RemoveProject">
      <summary>
            Project to be removed from the solution for this batch.
            </summary>
    </member>
    <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_RenameProject">
      <summary>
            Project to be renamed in the solution for this batch.
            </summary>
    </member>
    <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop._DelayedReloadAction.DRA_UpdateProjectParent">
      <summary>
            Project parent to be changed in the solution for this batch.
            </summary>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.SVsSolutionReloadManagerService">
      <summary>
            IVsSolutionReloadManager implementation service id.
            </summary>
    </member>
    <member name="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager">
      <summary>
             Manages external changes that are resolved to project[s] reload.
             Provides batching and ability to specialize reload logic.
            
             IVsSolutionReloadManager is freethreaded service and can be called from any thread without switching to UI thread.
             </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager.Advise(System.Guid@,System.Object)">
      <summary>
            The IVsSolutionReloadManagerEvents can be used to both react on reload changes as well as influence the outcome.
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager.Unadvise(System.UInt32)">
      <summary>
            The IVsSolutionReloadManagerEvents can be used to both react on reload changes as well as influence the outcome.
            </summary>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager.BeginBatch(Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadBatchHandler)">
      <summary>
            Start a reload batch scope
            </summary>
      <param name="pExecutor">pExecutor is the batch commit handler. can be null in which case we use the current or default one.</param>
    </member>
    <member name="M:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager.AddSolutionReload">
      <summary>
            A mechniasm for propagating "unbound" reload changes, aka where changes handler, just want to be included in any currently open batch.
            if there is no such we will create a default batch for these.
            Changes can still can be rejected from reload manager (for example if there is no open solution). In that case we return ppHandlingBatch==null;
            </summary>
    </member>
    <member name="P:Microsoft.Internal.VisualStudio.Shell.Interop.IVsSolutionReloadManager.CurrentBatch">
      <summary>
            get the current reload batch (if any, can return null).
            </summary>
    </member>
    <member name="M:EnvDTE90a.Process4.Attach2(System.Object)">
      <summary>
      </summary>
      <param name="Engines">Single <see cref="T:System.String" /> or an array of either <see cref="T:System.String" /> or <see cref="T:EnvDTE80.Engine" /> objects</param>
    </member>
    <member name="M:EnvDTE90.Process3.Attach2(System.Object)">
      <summary>
      </summary>
      <param name="Engines">Single <see cref="T:System.String" /> or an array of either <see cref="T:System.String" /> or <see cref="T:EnvDTE80.Engine" /> objects</param>
    </member>
    <member name="M:EnvDTE80.Process2.Attach2(System.Object)">
      <summary>
      </summary>
      <param name="Engines">Single <see cref="T:System.String" /> or an array of either <see cref="T:System.String" /> or <see cref="T:EnvDTE80.Engine" /> objects</param>
    </member>
    <member name="M:EnvDTE80.TaskItems2.Add(System.String,System.String,System.String,EnvDTE.vsTaskPriority,System.Object,System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>
      </summary>
      <remarks>The <paramref name="Priority" /> defaults to <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityMedium" /> in IDL but we can't default it here as the <paramref name="Icon" /> cannot be defaulted</remarks>
    </member>
    <member name="M:EnvDTE80.TaskItems2.Add2(System.String,System.String,System.String,EnvDTE.vsTaskPriority,System.Object,System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
      </summary>
      <remarks>The <paramref name="Priority" /> defaults to <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityMedium" /> in IDL but we can't default it here as the <paramref name="Icon" /> cannot be defaulted</remarks>
    </member>
    <member name="M:EnvDTE80.EditPoint2.TryToShow(EnvDTE.vsPaneShowHow,System.Object)">
      <summary>
      </summary>
      <remarks>The <paramref name="How" /> param defaults to <see cref="F:EnvDTE.vsPaneShowHow.vsPaneShowCentered" /> in IDL but we can't default it here because <paramref name="PointOrCount" /> can't be defaulted.</remarks>
    </member>
    <member name="M:EnvDTE80.TextPane2.TryToShow(EnvDTE.TextPoint,EnvDTE.vsPaneShowHow,System.Object)">
      <summary>
      </summary>
      <remarks>The <paramref name="How" /> param defaults to <see cref="F:EnvDTE.vsPaneShowHow.vsPaneShowAsIs" /> in IDL but can't be defaulted here because <paramref name="PointOrCount" /> can't be defaulted.</remarks>
    </member>
    <member name="M:EnvDTE.TextPane.TryToShow(EnvDTE.TextPoint,EnvDTE.vsPaneShowHow,System.Object)">
      <summary>
      </summary>
      <remarks>The <paramref name="How" /> param defaults to <see cref="F:EnvDTE.vsPaneShowHow.vsPaneShowAsIs" /> in IDL but can't be defaulted here because <paramref name="PointOrCount" /> can't be defaulted.</remarks>
    </member>
    <member name="M:EnvDTE.TaskItems.Add(System.String,System.String,System.String,EnvDTE.vsTaskPriority,System.Object,System.Boolean,System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>
      </summary>
      <remarks>The <paramref name="Priority" /> defaults to <see cref="F:EnvDTE.vsTaskPriority.vsTaskPriorityMedium" /> in IDL but we can't default it here as the <paramref name="Icon" /> cannot be defaulted</remarks>
    </member>
  </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>h1jmJR5lVWXTkWG1VAQlA4saGPSQ4jhpTGduRfN+iFk=</DigestValue></Reference></SignedInfo><SignatureValue>mVJUI4jLYPXP/WGY1wu3jaKVwYbzCqqx/Lig63BJ3+Wswq2gY3C1FTr1ayMcohb/YFaTmL0dm2z8/yxxJKq5Kq5YtGapw8s82ZJ2YdJ3lUHV3PaPNXO+YLcdT/Grp1DPeQnA/fJyeBly1OFPTTja5ABUdUV21v/JrRdcJymVQzXW1MWgy54OYgvUhK9ewJuq7XPX2c6/M72bvC4LdKCRhBUpT/i9YKgb0rOBzsk2C5YtQ77pVKPRtFCTavdK+Tz6kGm9A7Y2YIbAfUWb5eMexSZTx+J3SjkLnLNayK/yXL5cZ6KDepQQbhJAdUrSU6DBY/kQ2G+qhMdIe8L7ztjEpA==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>ok2x7OvGwA7zbnfezc3HT9M4dJka+FaQ7+vCqG40Bcm1QLlYIiDX/Whts0LVijaOvtl9iMeuShnAV7mchItKAVAABpyHuTuav2NCI9FsA8jFmlWndk3uK9RInNx1h1H4ojYxdBExyoN6muwwslKsLEfauUml7h5WAsDPpufTZd4yp2Jyiy384Zdd8CJlfQxfDe+gDZEciugWKHPSOoRxdjAk0GFm0OH14MyoYM4+M3mm1oH7vmSQohS5KIL3NEVW9Mdw7csTG5f93uORLvrJ/8ehFcGyWVb7UGHJnRhdcgGIbfiZzZlsAMS/DIBzM8RHKGNUNSbbLYmN/rt7pRjL4Q==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>